//Created,   9 Sep 2018
//Last Edit  9 Sep 2018

/**
 *  \file light.hpp
 *  \brief     Interface for light emitting probes and objects
 *  \author    Davide Pizzolotto
 *  \version   0.1
 *  \date      30 Mar 2018
 *  \copyright GNU GPLv3
 */


#ifndef __LIGHT_HPP__
#define __LIGHT_HPP__

#include "utility/spectrum.hpp"
#include "geometry/ray.hpp"

class Light
{
public:

    /**
     *  \brief Light constructor
     *  \param[in] intensity The intensity of the light
     */
    Light(const Spectrum& intensity);

    ///Default destructor
    virtual ~Light() = default;

    /** \brief Return the radiance for a random ray
     *
     *  Sample a random ray from the light and return the emitted radiance
     *  originated from that point
     *
     *  \param[in] r0 A random number in the interval (0.0,1.0)
     *  \param[in] r1 A random number in the interval (0.0,1.0)
     *  \param[in] r2 A random number in the interval (0.0,1.0)
     *  \param[in] r3 A random number in the interval (0.0,1.0)
     *  \param[out] out The computed ray originating the radiance, in world
     *  space units
     *  \param[out] pdf The probability density function of the chosen point
     *  over the light
     *  \return The emitted radiance from the computed ray
     *  \sa sample_visible_surface
     *  \sa pdf(const Ray* ray)const
     */
    virtual Spectrum sample_surface(float r0, float r1, float r2, float r3,
                                    Ray* out, float* pdf) const = 0;

    /** \brief Generate the incident vector and return the radiance
     *
     *  Given a point in the scene, compute the incident direction pointing
     *  towards the light and compute the radiance arriving at that point.
     *  The point sampled on the light is randomly chosen on the visible
     *  surface.
     *  This method assume that there are no occluding objects between the light
     *  and the point
     *
     *  \param[in] r0 A random number in the interval (0.0,1.0)
     *  \param[in] r1 A random number in the interval (0.0,1.0)
     *  \param[in] position The current position of the viewer, in other words
     *  the point receiving radiance from this light
     *  \param[out] wi The computed incident direction
     *  \param[out] pdf The probability density function of the chosen point
     *  over the light
     *  \param[out] distance The distance of the light from the position
     *  \return The emitted radiance from the computed ray
     *  \sa sample_surface
     *  \sa pdf(const Point3* p, const Vec3* wi)const
     */
    virtual Spectrum
    sample_visible_surface(float r0, float r1, const Point3* position, Vec3* wi,
                           float* pdf, float* distance) const = 0;

    /** \brief Return the emitted light spectrum
     *  \return The emitted light spectrum
     */
    Spectrum emissive_spectrum() const;

    /** \brief Return the probability density function for this light
     *
     *  This pdf is correct for rays generated by the sample_surface method.
     *
     *  \param[in] ray A ray generated with the sample_surface method,
     *  representing a random ray originating from the light
     *  \return The pdf for this light
     *  \sa sample_surface()
     */
    virtual float pdf(const Ray* ray) const = 0;

    /** \brief Return the probability density function for this light
     *
     *  This pdf is correct for dircetions generated by the
     *  sample_visible_surface method
     *
     *  \param[in] p The origin point
     *  \param[in] wi The incident vector generated with the
     *  sample_visible_surface method and representing the vector pointing
     *  towards the light, originating from the origin point
     *  \return The pdf for this light
     *  \sa sample_visible_surface()
     */
    virtual float pdf(const Point3* p, const Vec3* wi) const = 0;

protected:

    const Spectrum c;
};


#endif
